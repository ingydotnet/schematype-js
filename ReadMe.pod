=pod

=for comment
DO NOT EDIT. This Pod was generated by Swim v0.1.43.
See http://github.com/ingydotnet/swim-pm#readme

=encoding utf8

=head1 Name

schematype - Validator, Translator and Formatter for YAML, JSON, and Others

=head1 Synopsis

      # Check if a YAML file is well-formed:
      > schematype validate <schema-file-or-url> file.yaml

=head1 Description

The C<schematype> tool is a validator, translator and formatter for YAML,
JSON, CSV and TSV data.

=head1 Installation

The C<schematype> command is currently written in NodeJS. To install it, run:

      > npm install -g schematype

=head1 Usage

The C<schematype> command takes a data file as input and:

=over

=item * With no options, load it and report whether it is well-formed.

=item * With C<--schema=...> option, lint/validate it against the schema.

=item * With C<--to=...> option, write it to stdout in the specified format.

=back

If the input data is valid, C<schematype> will return C<0> as the exit code;
else it will return C<1>.

=head1 Command Options

The C<schematype> command has the following options:

=over

=item * C<-s>, C<< --schema=<file> >>

To use C<schematype> as a linter/validator, specify a schema file. Supports
the C<schemat> and C<json-schema> formats. See Below.

=item * C<-t>, C<< --to=<format> >>

With this option, C<schematype> will format the input data into the specified
format and write it to stdout. Valid formats are: C<yaml>, C<json>, C<csv> and
C<tsv>. This option can be used along with the C<--schema> option.

=item * C<-f>, C<< --from=<format> >>

Explicitly specify the input format. Usually C<schematype> can correctly
guess the input format. Use this option when it can't. Valid formats are:
C<yaml>, C<json>, C<csv> and C<tsv>. This option can be used along with the
C<--schema> option.

=item * C<-q>, C<--quiet>

Suppress all validation output. Use this when you only care about the
translation output, and/or the C<schematype> exit code.

=back

=head1 See Also

=over

=item * "JSON Schema"<...>

=back

=cut
