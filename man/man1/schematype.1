.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "schematype 1"
.TH schematype 1 "August 2016" "Generated by Swim v0.1.43" "SchemaType Compiler, Validator, Translator, Formatter and Generator"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
schematype \- SchemaType Compiler, Validator, Translator, Formatter and Generator
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 2
\&    # Check if a YAML file is well\-formed:
\&    > stp validate \-s file\-schema.stp file.yaml
.Ve
.SH "Description"
.IX Header "Description"
The \f(CW\*(C`schematype\*(C'\fR package installs a \s-1CLI\s0 program called \f(CW\*(C`stp\*(C'\fR. The \f(CW\*(C`stp\*(C'\fR tool has many functions related to SchemaType.  It can do data document (\s-1YAML, JSON,\s0 others) validation. It can import other kinds of schema into SchemaType and it can export SchemaType back into those formats. It can compile and reformat SchemaType (\f(CW\*(C`.stp\*(C'\fR) files. Most importantly, it can generate all kinds of software code from SchemaType files. These include:
.IP "\(bu" 4
Input editors
.IP "\(bu" 4
Client \f(CW\*(C`struct\*(C'\fR/\f(CW\*(C`typedef\*(C'\fR code
.IP "\(bu" 4
Server model code
.IP "\(bu" 4
Database \s-1SQL\s0
.IP "\(bu" 4
Data visualizers
.IP "\(bu" 4
Test input
.IP "\(bu" 4
Documentation
.SH "Installation"
.IX Header "Installation"
The \f(CW\*(C`stp\*(C'\fR command is currently written in Node.js. To install it, run:
.PP
.Vb 2
\&    > npm install \-g schematype
\&    > stp \-h
.Ve
.PP
You can also run it as a Docker container, if you have Docker installed and don't want to install it with Node.js/npm. See below.
.SH "Usage"
.IX Header "Usage"
The \f(CW\*(C`stp\*(C'\fR command has many functions. It has a subcommand for each function. The general usage is:
.PP
.Vb 1
\&    stp <command> [<option>...] [<file>...]
.Ve
.PP
Use this to get a help overview:
.PP
.Vb 1
\&    stp \-h
.Ve
.PP
this to see the full help:
.PP
.Vb 1
\&    stp help
.Ve
.PP
and this to get help for a specific command:
.PP
.Vb 1
\&    stp help <command>
.Ve
.PP
See below for a full description of each command and option.
.SH "Running with Docker"
.IX Header "Running with Docker"
If you set up this shell alias:
.PP
.Vb 1
\&    alias stp=\*(Aqdocker run \-i \-v $PWD:/data schematype/stp\*(Aq
.Ve
.PP
then you can use the \f(CW\*(C`stp\*(C'\fR alias just like an installed version of \f(CW\*(C`stp\*(C'\fR. This assumes you have \f(CW\*(C`docker\*(C'\fR properly installed, of course.
.SH "Commands"
.IX Header "Commands"
.IP "\(bu" 4
\&\f(CW\*(C`validate\*(C'\fR \*(-- Validate one or more data documents against a schema.
.IP "\(bu" 4
\&\f(CW\*(C`compile\*(C'\fR \*(-- Compile a \f(CW\*(C`.stp\*(C'\fR file to a \f(CW\*(C`.stpx\*(C'\fR file.
.IP "\(bu" 4
\&\f(CW\*(C`export\*(C'\fR \*(-- Export a \f(CW\*(C`.stp\*(C'\fR file to a \f(CW\*(C`.jsc\*(C'\fR (\s-1JSON\s0 Schema) file.
.SH "Options"
.IX Header "Options"
The \f(CW\*(C`\-\-quiet\*(C'\fR and \f(CW\*(C`\-\-verbose\*(C'\fR options are available for all commands. The \f(CW\*(C`\-\-schema\*(C'\fR option is used for all commands that need a schema. The \f(CW\*(C`\-\-input\*(C'\fR and \f(CW\*(C`\-\-output\*(C'\fR options specify files explicitly when they can't be inferred from a file list. The \f(CW\*(C`\-\-from\*(C'\fR and \f(CW\*(C`\-\-to\*(C'\fR options specify the input and output formats when they can't be inferred from file extensions or content heuristics.
.PP
Many commands accept a list of file paths to perform the specified operation on. Input files can either be local paths or they can be URLs. You can also use the \f(CW\*(C`\-\-input\*(C'\fR option to specify one input explicitly. The \f(CW\*(C`\-\-input\*(C'\fR option should not be used along with a file list. Use one or the other.
.PP
The \f(CW\*(C`stp\*(C'\fR command has the following options:
.IP "\(bu" 4
\&\f(CW\*(C`\-q\*(C'\fR, \f(CW\*(C`\-\-quiet\*(C'\fR
.Sp
Tell \f(CW\*(C`stp\*(C'\fR to be less noisy about what it is doing.
.IP "\(bu" 4
\&\f(CW\*(C`\-v\*(C'\fR, \f(CW\*(C`\-\-verbose\*(C'\fR
.Sp
Tell \f(CW\*(C`stp\*(C'\fR to be more moisy about what it is doing.
.IP "\(bu" 4
\&\f(CW\*(C`\-s\*(C'\fR, \f(CW\*(C`\-\-schema=<file>\*(C'\fR
.Sp
Specify the schema to use for this operation. Schema files end with \f(CW\*(C`.stp\*(C'\fR and compiled schema files end with \f(CW\*(C`.stpx\*(C'\fR. If the schema path is specified without a file extension, \f(CW\*(C`stp\*(C'\fR will look for a \f(CW\*(C`.stpx\*(C'\fR file, and then for a \f(CW\*(C`.stp\*(C'\fR file. If the path is a directory (URLs should end with \f(CW\*(C`/\*(C'\fR), \f(CW\*(C`stp\*(C'\fR will look for \f(CW\*(C`index.stpx\*(C'\fR or \f(CW\*(C`index.stp\*(C'\fR file.
.IP "\(bu" 4
\&\f(CW\*(C`\-i\*(C'\fR, \f(CW\*(C`\-\-input=<file>\*(C'\fR
.Sp
Specify a single input file path for the operation. Use this in place of the file list argument if appropriate. A value of \f(CW\*(C`\-\*(C'\fR indicates that the input will be read from \s-1STDIN.\s0 The file extension will be used as the \f(CW\*(C`\-\-from\*(C'\fR value, if that is needed.
.IP "\(bu" 4
\&\f(CW\*(C`\-o\*(C'\fR, \f(CW\*(C`\-\-output=<file>\*(C'\fR
.Sp
Specify a single output file path for the operation. A value of \f(CW\*(C`\-\*(C'\fR indicates that the output will be written to \s-1STDOUT.\s0 The file extension will br used as the \f(CW\*(C`\-\-to\*(C'\fR value, if needed.
.IP "\(bu" 4
\&\f(CW\*(C`\-f\*(C'\fR, \f(CW\*(C`\-\-from=<format>\*(C'\fR
.Sp
SchemaType commands can operate on different types of input data (like \s-1YAML\s0 or \s-1JSON\s0) for example. The \f(CW\*(C`\-\-from\*(C'\fR option explicitly specifies the input format. Usually \f(CW\*(C`stp\*(C'\fR can correctly guess the input format. Use this option when it can't.
.IP "\(bu" 4
\&\f(CW\*(C`\-t\*(C'\fR, \f(CW\*(C`\-\-to=<format>\*(C'\fR
.Sp
Explicitly specify the output format for the command.
.IP "\(bu" 4
\&\f(CW\*(C`\-l\*(C'\fR, \f(CW\*(C`\-\-layout=<layout>\*(C'\fR
.Sp
When \f(CW\*(C`stp\*(C'\fR writes output files, there is often more than one way to do it. This option specifies the output layout style to use. Current styles are:
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`compact\*(C'\fR
.Sp
Write \f(CW\*(C`.stp\*(C'\fR files in a more compact form. Write \s-1JSON\s0 files without whitespace between tokens. The \s-1JSON\s0 default is a pretty style.
.IP "\(bu" 4
\&\f(CW\*(C`explicit\*(C'\fR
.Sp
Write \f(CW\*(C`.stp\*(C'\fR files in a more explicit style. The default is a medium between compact and explicit.
.RE
.RS 4
.RE
.SH "Examples"
.IX Header "Examples"
You can try out \f(CW\*(C`stp\*(C'\fR yourself with these commands:
.PP
.Vb 5
\&    > git clone https://github.com/schematype/schematype\-js
\&    > cd schematype\-js/test/manifest
\&    > stp validate \-s manifest.stp manifest.yml
\&    > stp compile \-i manifest.stp
\&    > stp export \-i manifest.stp \-t jsc
.Ve
.SH "See Also"
.IX Header "See Also"
.IP "\(bu" 4
\&\*(L"\s-1JSON\s0 Schema\*(R"<...>
